/* Copyright 2016 The Bazel Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"flag"
	"io/ioutil"
	"log"
	"path/filepath"

	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

var (
	configSource = flag.String("config_source", "", "a file that is read to learn about external repositories")
	dest         = flag.String("dest", "", "destination directory")
)

var repoKind = map[string]rule.KindInfo{
	"go_repository": {
		MatchAttrs:    []string{"importpath"},
		NonEmptyAttrs: map[string]bool{"importpath": true},
	},
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("generate_repo_config: ")

	flag.Parse()
	if *dest == "" {
		log.Fatal("-dest must be set")
	}
	if flag.NArg() != 0 {
		log.Fatal("generate_repo_config does not accept positional arguments")
	}
	if err := generateRepoConfig(*dest, *configSource); err != nil {
		log.Fatal(err)
	}
}

func generateRepoConfig(dest, configSource string) error {
	configPath := filepath.Join(dest, "WORKSPACE")

	var buf bytes.Buffer
	buf.WriteString("# Code generated by generate_repo_config.go; DO NOT EDIT.\n")

	if configSource == "" {
		if err := ioutil.WriteFile(configPath, buf.Bytes(), 0666); err != nil {
			return err
		}
		return nil
	}

	sourceFile, err := rule.LoadWorkspaceFile(configSource, "")
	if err != nil {
		return err
	}
	repos, reposByFile, err := repo.ListRepositories(sourceFile)
	if err != nil {
		return err
	}

	for r := range reposByFile {
		for _, d := range r.Directives {
			// skip repository_macro directives, because for the repo config we flatten
			// macros into one file
			if d.Key != "repository_macro" {
				buf.WriteString("# gazelle:" + d.Key + " " + d.Value + "\n")
			}
		}
	}
	if err := ioutil.WriteFile(configPath, buf.Bytes(), 0666); err != nil {
		return err
	}

	rules := make([]*rule.Rule, 0)
	for _, r := range repos {
		if r.Name != "" && r.GoPrefix != "" {
			newRule := rule.NewRule("go_repository", r.Name)
			newRule.SetAttr("importpath", r.GoPrefix)
			rules = append(rules, newRule)
		}
	}

	destFile, err := rule.LoadWorkspaceFile(configPath, "")
	if err != nil {
		return err
	}
	repo.MergeRules(rules, map[*rule.File][]string{destFile: make([]string, 0)}, destFile, repoKind, false)
	if err := destFile.Save(configPath); err != nil {
		return err
	}

	return nil
}
