// +build ignore

/* Copyright 2019 The Bazel Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// This code processes googleapis.xml xml file generated by the following Bazel query:
//     bazel query 'kind("proto_library rule", //google/...)' --output xml --experimental_enable_repo_mapping > googleapis.xml
//

package main

import (
	"bytes"
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"os"
	"sort"
	"strings"
)

type Query struct {
	XMLName xml.Name `xml:"query"`
	Version string   `xml:"version,attr"`
	Rules   []Rule   `xml:"rule"`
}

type Rule struct {
	XMLName xml.Name `xml:"rule"`
	Class   string   `xml:"class,attr"`
	Name    string   `xml:"name,attr"`
	Strings []String `xml:"string"`
	Labels  []Label  `xml:"label"`
	Lists   []List   `xml:"list"`
}

type List struct {
	XMLName xml.Name `xml:"list"`
	Name    string   `xml:"name,attr"`
	Labels  []Label  `xml:"label"`
}

type Label struct {
	XMLName xml.Name `xml:"label"`
	Name    string   `xml:"name,attr"`
	Value   string   `xml:"value,attr"`
}

type String struct {
	XMLName xml.Name `xml:"string"`
	Name    string   `xml:"name,attr"`
	Value   string   `xml:"value,attr"`
}

func processQueryXml(xmlPath, repoPrefix string, protoContent *bytes.Buffer) (err error) {
	query, err := readQueryXml(xmlPath)
	if err != nil {
		return
	}

	relPathList, err := processQuery(query, repoPrefix)
	for _, v := range relPathList {
		if _, err = fmt.Fprintf(protoContent, "%s\n", v); err != nil {
			return err
		}
	}

	return nil
}

func readQueryXml(xmlPath string) (query Query, err error) {
	xmlFile, err := os.Open(xmlPath)
	if err != nil {
		fmt.Println(err)
		return query, err
	}
	defer xmlFile.Close()

	byteValue, err := ioutil.ReadAll(xmlFile)
	if err != nil {
		return query, err
	}

	// golang cannot process xml version > 1.0 yet. It seems like the generated xml is still a
	// valid 1.0 one, so the following hack is "Ok".
	xmlVersion := byteValue[:19]
	if string(xmlVersion) == `<?xml version="1.1"` {
		copy(xmlVersion, `<?xml version="1.0"`)
	}

	err = xml.Unmarshal(byteValue, &query)
	return query, err
}

func processQuery(query Query, repoPrefix string) (relPathList []string, err error) {
	protoLabelMap := make(map[string]string)
	for i := 0; i < len(query.Rules); i++ {
		rule := query.Rules[i]
		if "go_proto_library" == rule.Class {
			m, err := processGoProtoLibraryRule(rule, repoPrefix)
			if err != nil {
				continue
			}
			for k, v := range m {
				protoLabelMap[k] = v
			}
		}
	}

	relPathList = []string{}
	for i := 0; i < len(query.Rules); i++ {
		rule := query.Rules[i]
		if "proto_library" == rule.Class {
			paths, err := processProtoLibraryRule(protoLabelMap[rule.Name], rule)
			if err != nil {
				continue
			}
			relPathList = append(relPathList, paths...)
		}
	}

	sort.Strings(relPathList)
	return relPathList, nil
}

func processGoProtoLibraryRule(rule Rule, repoPrefix string) (protoLabelMap map[string]string, err error) {
	protoLabelMap = make(map[string]string)

	packagePath := ""
	for j := 0; j < len(rule.Strings); j++ {
		str := rule.Strings[j]
		if "importpath" == str.Name {
			packagePath = str.Value
			break
		}
	}

	if len(packagePath) <= 0 {
		// should never happen
		return protoLabelMap, fmt.Errorf("go_proto_library does not have 'importpath' argument")
	}

	// "proto" argument case (single value)
	protoLabel := ""
	for j := 0; j < len(rule.Labels); j++ {
		label := rule.Labels[j]
		if "proto" == label.Name {
			protoLabel = label.Value
			break
		}
	}

	goLabel := repoPrefix + rule.Name

	if len(protoLabel) > 0 {
		protoLabelMap[protoLabel] = strings.Join([]string{repoPrefix + protoLabel, packagePath, goLabel}, ",")
		return protoLabelMap, nil
	}

	// "protos" argument case (multiple values)
	for j := 0; j < len(rule.Lists); j++ {
		list := rule.Lists[j]
		if "protos" != list.Name {
			continue
		}
		for k := 0; k < len(list.Labels); k++ {
			protoLabel = list.Labels[k].Value
			protoLabelMap[protoLabel] = strings.Join([]string{repoPrefix + protoLabel, packagePath, goLabel}, ",")
		}
	}

	return protoLabelMap, nil
}

func processProtoLibraryRule(protoLabelInfo string, rule Rule) (relPathList []string, err error) {
	extraSuffix := "_with_info"

	if len(protoLabelInfo) <= 0 {
		return relPathList, nil
	}

	for j := 0; j < len(rule.Lists); j++ {
		list := rule.Lists[j]
		if "srcs" != list.Name {
			continue
		}
		for k := 0; k < len(list.Labels); k++ {
			relPath := list.Labels[k].Value
			if strings.HasSuffix(relPath, extraSuffix) {
				relPath = relPath[:-len(extraSuffix)]
			}
			relPath = strings.Replace(relPath, ":", "/", 1)
			relPath = strings.Replace(relPath, "//", "", 1)
			relPathList = append(relPathList, strings.Join([]string{relPath, protoLabelInfo}, ","))
		}
	}

	return relPathList, nil
}
